

1. Task0:

"""
print(f"First record of texts, {texts[0][0]} texts {texts[0][1]} at time {texts[0][2]}") # O(1)

print(f"Last record of calls, {calls[-1][0]} calls {calls[-1][1]} at time {calls[-1][2]}, lasting {calls[-1][3]} seconds") # O(1)
"""

O(1) + O(1) = O(2)
runtime = O(1)


2. Task1:

"""
call_set = set() # O(1)
text_set = set() # O(1)

text_set.update(record[0] for record in texts) # O(n)
text_set.update(record[1] for record in texts) # O(n)
call_set.update(record[0] for record in calls) # O(n)
call_set.update(record[1] for record in calls) # O(n)

count = text_set.union(call_set) # O(1)
print(f"There are {len(count)} different telephone numbers in the records") # O(1)
"""
(O(n) + O(n) + O(n) + O(n)) + (O(1) + O(1) + O(1) + O(1))
O(n) + O(4)
runtime = O(n)


3.Task2:

"""
call_record = {} # O(1)
for record in calls: # O(n)
    if record[0] not in call_record.keys(): # O(n)
        call_record[record[0]] = int(record[-1]) # O(1)
    else: # O(1)
        call_record[record[0]] += int(record[-1]) # O(1)

    if record[1] not in call_record.keys(): # O(n)
        call_record[record[1]] = int(record[-1]) # O(1)
    else: # O(1)
        call_record[record[1]] += int(record[-1]) # O(1)

call_record = {v: k for k, v in call_record.items()} # O(n)
longest_number = call_record[total_time] # O(1)

print(f"{longest_number} spent the longest time, {total_time} seconds, on the phone during September 2016.") # O(1)
"""
O(n log n) + (O(n) + O(n) + O(n) + O(n)) + (O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1))
O(n log n) + (O(n) + O(n) + O(n) + O(n)) + O(8)
O(n log n) + O(n) + O(1)
runtime = O(n log n) 


4. Task3:
"""
# PART A
people_of_bang = list() # O(1)
fixed_lines_out = [] # O(1)
fixed_lines_in = [] # O(1)

for record in calls: # O(n)
    if "(080)" in record[0][:5]: # O(5)
        fixed_lines_out.append(record[0]) # O(1)
        if "(0" in record[1][:2]: # O(2)
            left = record[1].find("(") # O(1)
            right = record[1].find(")") # O(1)
            people_of_bang.append(str(record[1][left:right+1])) # O(1)
        if "140" in record[1][:3]: # O(3)
            people_of_bang.append([record[1]]) # O(1)
        if record[1][0] in ["7", "8", "9"]: # O(3)
            people_of_bang.append(record[1][:4]) # O(1)
        if "(080)" in record[1][:5]: # O(5)
            fixed_lines_in.append(record[1]) # O(1)

people_of_bang = sorted(set(people_of_bang)) # O(n log n)
build_string = '\n'.join(people_of_bang) # O(1)


print(f"The numbers called by people in Bangalore have codes: \n{build_string}") # O(1)

# Part B
percent = 100 * (len(fixed_lines_in) / len(fixed_lines_out)) # O(1)
print(f"{round(percent, 2)} percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore.") # O(1)
"""
 
 O(n log n) + (O(5) + O(2) + O(3) + O(3) + O(5)) + O(n) + (O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1))
 O(n log n) + O(18) + O(n) + O(14)
 runtime = O(n log n)


5. Task4:

"""
callers = set() # O(1)
others = set() # O(1)

for record in calls: # O(n)
    callers.add(record[0]) # O(1)
    others.add(record[1]) # O(1)

for record in texts: # O(n)
    others.add(record[0]) # O(1)
    others.add(record[1]) # O(1)

telemarketers = callers.difference(others) # O(len(set)
telemarketers = sorted(telemarketers) # O(n log n)
build_string = '\n'.join(telemarketers) # O(1)

print(f"These numbers could be telemarketers: \n{build_string}") # O(1)
"""
(O(len(set))) + O(n log n) + (O(n) + O(n)) + (O(1) + O(1) + O(1) + O(1) + O(1) + O(1) +O(1) + O(1))
(O(len(set))) + O(n log n) + O(n) + (O(8))
(O(len(set))) + O(n log n) + O(n) + O(1)
runtime = O(n log n)




