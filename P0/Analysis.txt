

1. Task0:

"""
print(f"First record of texts, {texts[0][0]} texts {texts[0][1]} at time {texts[0][2]}") # O(1)

print(f"Last record of calls, {calls[-1][0]} calls {calls[-1][1]} at time {calls[-1][2]}, lasting {calls[-1][3]} seconds") # O(1)
"""

O(1) + O(1) = O(2)
    runtime = O(1)


2. Task1:

"""
print(f"There are {len(calls) + len(texts)} different telephone numbers in the records") O(1)
"""
runtime = O(1)


3.Task2:

"""
call_record = {}
for record in calls: # O(n)
    if record[0] not in call_record.keys(): # O(1)
        call_record[record[0]] = record[-1] # O(1)
    call_record[record[0]] += record[-1] # O(1)
total_time = sorted(call_record.values()) # O(n log n)
total_time = total_time[0] # O(1)

call_record = {v: k for k, v in call_record.items()} # O(n)
longest_number = call_record[total_time] # O(1)

print(f"{longest_number} spent the longest time, {total_time} seconds, on the phone during September 2016.") # O(1)
"""
O(n log n) + (O(n) + O(n)) + (O(1) + O(1) + O(1) + O(1) + O(1) + O(1))
O(n log n) + (O(n) + O(n)) + O(6)
O(n log n) + (O(n) + O(n)) + O(1)
runtime = O(n log n) 


4. Task3:
"""
# PART A
codes = {"Bangalore": [], "Mobile": [], "Telemarketer": [], "OutgoingBangalore": []}

for record in calls: # O(n)
    if "(080)" in record[0]: # O(1)
        codes["Bangalore"].append((record[0])) # O(1)
        if "(080)" in record[1]: # O(1)
            codes["OutgoingBangalore"].append([record[1]]) # O(1)
    if ("(" or ")") not in record[0]: # O(1)
        codes["Mobile"].append(record[0]) # O(1)
    if "140" in record[0][:3]: # O(1)
        codes["Telemarketer"].append(record[0]) # O(1)

print(f"The numbers called by people in Bangalore have codes: {codes['Bangalore']}") # O(1)

# Part B
from_bang = len(codes["Bangalore"]) # O(1)
to_bang = len(codes["OutgoingBangalore"]) # O(1)

percent = 100 * (to_bang / from_bang) # O(1)
print(f"{round(percent, 2)} percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore.") # O(1)
"""
 
 O(n) + (O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1) + O(1))
 O(n) + O(13)
 runtime = O(n)


5. Task4:

"""
outgoing_calls = set() # O(1)
incoming_calls = set() # O(1)
outgoing_texts = set() # O(1)
incoming_texts = set() # O(1)
for record in calls: # O(n)
    outgoing_calls.add(record[0]) # O(n)
    incoming_calls.add(record[1]) # O(n)

for record in texts: # O(n)
    outgoing_texts.add(record[0]) # O(n)
    incoming_texts.add(record[1]) # O(n)

calls_exc = outgoing_calls.difference(incoming_calls) # O(len(set))
calls_exc_minus_incoming = calls_exc.difference(incoming_texts) # O(len(set))
telemarketers = calls_exc_minus_incoming.difference(outgoing_texts) # O(len(set))
telemarketers = sorted(telemarketers) # O(n log n)
build_string = '\n'.join(telemarketers) # O(1)

print(f"These numbers could be telemarketers: \n{build_string}") # O(1)
"""
(O(len(set)) + O(len(set)) + O(len(set))) + O(n log n) + (O(n) + O(n) + O(n) + O(n) + O(n) + O(n)) + (O(1) + O(1) + O(1) + O(1) + O(1) + O(1))
(O(len(set)) + O(len(set)) + O(len(set))) + O(n log n) + O(n)^6 + (O(6))
(O(len(set)) + O(len(set)) + O(len(set))) + O(n log n) + O(n)^6 + O(1)
runtime = O(n log n)




